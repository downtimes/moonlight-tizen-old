/**
 * @file communication.js
 * @brief NaCl application communication handler.
 * All NaCl <-> JS communication should be implemented in this file.
 */

/**
 * This function is called when a message from NaCl arrives.
 */
function handleNaclMessage(message_event) {
   var message = message_event.data;

   if (typeof message['messageID'] !== 'undefined') {
      switch (message['messageID']) {
         case 1:
            onReceive_tcpSocketGetLocalAddressResponse(message['address']);
            break;
         case 2:
            onReceive_tcpSocketGetRemoteAddressResponse(message['address']);
            break;
         case 3:
            onReceive_tcpSocketBindResponse(message['code']);
            break;
         case 4:
            onReceive_tcpSocketConnectResponse(message['code']);
            break;
         case 5:
            onReceive_tcpSocketReadResponse(message['buffer'], message['bytesRead'], message['code']);
            break;
         case 6:
            onReceive_tcpSocketWriteResponse(message['code']);
            break;
         case 7:
            onReceive_tcpSocketListenResponse(message['code']);
            break;
         case 8:
            onReceive_tcpSocketAcceptResponse(message['address'], message['code']);
            break;
         case 9:
            onReceive_tcpSocketSetOptionResponse(message['code']);
            break;
         default:
         // Unknown message
      }
   }
   if (printIfLog(message)) {  // function defined in common.js
      return;   // this was a log or error message, so we can finish this handling
   }
}

/*
 * WARNING: Handling of dictionaries used by NaCl communication can cause problems if
 * Object.prototype in JS is modified, which results in not receiving messages in NaCl plugin.
 * Do not change Object.prototype if you are using complex types (dictionary, table) or
 * generator to generate JS->NaCl communication. If you need to modify Object.prototype, you
 * need to write your own send* functions using only simple types as message.
 */
// Autogenerated functions sending messages to NaCl module

/**
 * Sending function for the 'tcpSocketSetOption' message.
 *
 * @param {int} option The option to set. Please see the PP_TCPSocket_Option description for option names, value types and allowed values.
 * @param {string} value The option value to set.
 */
function send_tcpSocketSetOption(arg_option, arg_value) {
   var message = {
      'messageID': 9,
      'option': arg_option,
      'value': arg_value
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketClose' message.
 *
 */
function send_tcpSocketClose() {
   var message = {
      'messageID': 8
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketAccept' message.
 *
 */
function send_tcpSocketAccept() {
   var message = {
      'messageID': 7
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketListen' message.
 *
 * @param {int} backlog A hint to determine the maximum length to which the queue of pending connections may grow.
 */
function send_tcpSocketListen(arg_backlog) {
   var message = {
      'messageID': 6,
      'backlog': arg_backlog
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketWrite' message.
 *
 * @param {ArrayBuffer} buffer Buffer with data to send.
 * @param {int} bytesToSend Number of bytes to send.
 */
function send_tcpSocketWrite(arg_buffer, arg_bytesToSend) {
   var message = {
      'messageID': 5,
      'buffer': arg_buffer,
      'bytesToSend': arg_bytesToSend
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketRead' message.
 *
 * @param {int} bytesToRead Number of bytes to read.
 */
function send_tcpSocketRead(arg_bytesToRead) {
   var message = {
      'messageID': 4,
      'bytesToRead': arg_bytesToRead
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketConnect' message.
 *
 * @param {string} host Host name or IP address
 * @param {int} port Port number from 0 to 65535.
 */
function send_tcpSocketConnect(arg_host, arg_port) {
   var message = {
      'messageID': 3,
      'host': arg_host,
      'port': arg_port
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketBind' message.
 *
 * @param {string} host Host name or IP address
 * @param {int} port Port number from 0 to 65535.
 */
function send_tcpSocketBind(arg_host, arg_port) {
   var message = {
      'messageID': 2,
      'host': arg_host,
      'port': arg_port
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketGetRemoteAddress' message.
 *
 * @param {bool} asIPv6 Set true if should get IPv6 address, otherwise will return IPv4.
 * @param {bool} withPort Set true if address should contain port as :<port_num>
 */
function send_tcpSocketGetRemoteAddress(arg_asIPv6, arg_withPort) {
   var message = {
      'messageID': 1,
      'asIPv6': arg_asIPv6,
      'withPort': arg_withPort
   }
   nacl_module.postMessage(message);
}


/**
 * Sending function for the 'tcpSocketGetLocalAddress' message.
 *
 * @param {bool} asIPv6 Set true if should get IPv6 address, otherwise will return IPv4.
 * @param {bool} withPort Set true if address should contain port as [:port_num]
 */
function send_tcpSocketGetLocalAddress(arg_asIPv6, arg_withPort) {
   var message = {
      'messageID': 0,
      'asIPv6': arg_asIPv6,
      'withPort': arg_withPort
   }
   nacl_module.postMessage(message);
}



// Autogenerated functions receiving messages to NaCl module(s)

/**
 * Handler for the 'tcpSocketSetOptionResponse' message.
 *
 * @param {int} code Zero if succeed, otherwise an error code from pp_errors.h.
 */
function onReceive_tcpSocketSetOptionResponse(arg_code) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

/**
 * Handler for the 'tcpSocketAcceptResponse' message.
 *
 * @param {string} address An address of accepted connection as host:port.
 * @param {int} code Zero if succeed, otherwise an error code from pp_errors.h.
 */
function onReceive_tcpSocketAcceptResponse(arg_address, arg_code) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

/**
 * Handler for the 'tcpSocketListenResponse' message.
 *
 * @param {int} code Zero if succeed, otherwise an error code from pp_errors.h.
 */
function onReceive_tcpSocketListenResponse(arg_code) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

/**
 * Handler for the 'tcpSocketWriteResponse' message.
 *
 * @param {int} code A non-negative number on success to indicate how many bytes have been written; otherwise, an error code from pp_errors.h.
 */
function onReceive_tcpSocketWriteResponse(arg_code) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

/**
 * Handler for the 'tcpSocketReadResponse' message.
 *
 * @param {ArrayBuffer} buffer Buffer with read data.
 * @param {int} bytesRead The number of bytes to read.
 * @param {int} code A non-negative number on success to indicate how many bytes have been read, 0 means that end-of-file was reached; otherwise, an error code from pp_errors.h
 */
function onReceive_tcpSocketReadResponse(arg_buffer, arg_bytesRead, arg_code) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

/**
 * Handler for the 'tcpSocketConnectResponse' message.
 *
 * @param {int} code Zero if succeed, otherwise an error code from pp_errors.h.
 */
function onReceive_tcpSocketConnectResponse(arg_code) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

/**
 * Handler for the 'tcpSocketBindResponse' message.
 *
 * @param {int} code Zero if succeed, otherwise an error code from pp_errors.h.
 */
function onReceive_tcpSocketBindResponse(arg_code) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

/**
 * Handler for the 'tcpSocketGetRemoteAddressResponse' message.
 *
 * @param {string} address Network address with optional port number as host[:port_num]
 */
function onReceive_tcpSocketGetRemoteAddressResponse(arg_address) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

/**
 * Handler for the 'tcpSocketGetLocalAddressResponse' message.
 *
 * @param {string} address Network address with optional port number as host[:port_num]
 */
function onReceive_tcpSocketGetLocalAddressResponse(arg_address) {
   // TODO: Insert your code here to handle incoming message from NaCl plugin.
}

